package com.abba.tictacmed.infrastructure.utils;

import com.abba.tictacmed.domain.patient.model.Patient;
import com.abba.tictacmed.infrastructure.messaging.whatsapp.dto.MessageReceived;
import com.abba.tictacmed.infrastructure.messaging.whatsapp.dto.MessageReceivedType;
import com.whatsapp.api.domain.messages.Button;
import com.whatsapp.api.domain.messages.Reply;
import com.whatsapp.api.domain.messages.type.ButtonType;

public final class Buttons {

    public static Button createConfirmButton(Patient patient, String medicineName) {
        return new Button().setType(ButtonType.REPLY).setReply(new Reply().setId(btnId(patient, medicineName, MessageReceivedType.CONFIRM_MEDICATION)).setTitle("Confirmado"));
    }

    public static Button createSkipButton(Patient patient, String medicineName) {
        return new Button().setType(ButtonType.REPLY).setReply(new Reply().setId(btnId(patient, medicineName, MessageReceivedType.SKIP_MEDICATION)).setTitle("Pular"));
    }

    /**
     * Parses a reply id generated by {@link #btnId(Patient, String, MessageReceivedType)} and extracts patientContact, medicineName and action type.
     * Expected format: "<patientContact>_<medicineName>_<type>".
     *
     * @param reply the WhatsApp reply object (must contain a non-blank id)
     * @return minimal MessageReceived (type and medicine)
     * @throws IllegalArgumentException if id is null/blank or malformed
     */
    public static MessageReceived parseReply(String reply) {
        if (reply == null || reply.isBlank()) {
            throw new IllegalArgumentException("Reply or reply id is null/blank");
        }

        ParsedButton parsedButton = parseId(reply);

        return new MessageReceived(parsedButton.type, parsedButton.medicineName);
    }

    /**
     * Variant that accepts the raw id string.
     */
    public static ParsedButton parseId(String id) {
        if (id == null || id.isBlank()) throw new IllegalArgumentException("id is null/blank");
        String[] parts = id.split("_", 3);
        if (parts.length != 3) throw new IllegalArgumentException("Malformed button id: " + id);
        try {
            String patientContact = parts[0];
            String medicineName = parts[1];
            String type = parts[2];
            return new ParsedButton(patientContact, medicineName, MessageReceivedType.valueOf(type));
        } catch (Exception e) {
            throw new IllegalArgumentException("Malformed button id: " + id, e);
        }
    }

    private static String btnId(Patient patient, String medicineName, MessageReceivedType type) {
        return patient.getContact() + "_" + medicineName + "_" + type;
    }

    /**
     * Value object carrying parsed data from a button reply id.
     */
    public record ParsedButton(String patientContact, String medicineName, MessageReceivedType type) {
    }


}
